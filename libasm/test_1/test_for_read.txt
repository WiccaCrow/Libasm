cub3D
Мой первый RayCaster с miniLibX

Описание: Этот проект вдохновлен всемирно известной одноименной игрой 90-х, которая была первым шутером от первого лица в истории. Это позволит вам изучить лучшую модель. Ваша цель - создать динамичный вид внутри лабиринта, в котором вам нужно будет ориентироваться.
_______________________________

Содержание

I Предисловие .....................2
II цели ...........................3
III Общие инструкции ..............4
IV Обязательная часть - cub3D .....5
V бонус часть .....................9
VI Примеры .......................11


_______________________________

Глава I 


Введение
Wolfenstein 3D, разработанный Id Software сверхизвестными Джоном Кармаком и Джоном Ромеро, опубликованный в 1992 году Apogee Software, - это первый настоящий шутер от первого лица в истории видеоигр.

Wolfenstein 3D является предком таких игр, как Doom (Id Software, 1993), Doom II (Id Software, 1994), Duke Nukem 3D (3D Realm, 1996) и Quake (Id Software, 1996), которые являются дополнительными вечными вехами в мир видеоигр.
Теперь ваша очередь пережить Историю заново ...
_______________________________

Глава II.

Цели
Цели этого проекта аналогичны целям первого года: строгость, использование C, использование основных алгоритмов, информационные исследования и т. Д.
Как проект графического дизайна, cub3D позволит вам улучшить свои навыки в следующих областях: окна, цвета, события, формы заливки и т. Д.
В заключение, cub3D - замечательная площадка для изучения практических приложений математики в игровой форме без необходимости разбираться в деталях.
С помощью многочисленных документов, доступных в Интернете, вы будете использовать математику как инструмент для создания элегантных и эффективных алгоритмов.

Мы рекомендуем вам протестировать оригинальную игру перед запуском этого проекта:
                        http://users.atw.hu/wolf3d/
______________________________________

Глава III.

Глава III.
Общие инструкции
• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включены в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.

• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное освобождение и т.д.), за исключением неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.

• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Никакие утечки недопустимы.

• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror, и ваш Makefile не должен повторно связываться.

• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.

• Чтобы получить бонусы для вашего проекта, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus. {C / h}. Оценка обязательной и бонусной части проводится отдельно.

• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и связанный с ним Makefile в папку libft с соответствующим Makefile. Makefile вашего проекта должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.

• Мы рекомендуем вам создавать программы тестирования для вашего проекта, даже если эту работу не нужно будет отправлять и оценивать. Это даст вам возможность легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно полезными во время защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера, которого вы оцениваете.

• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо разделе вашей работы произойдет ошибка, оценка остановится.

______________________________________

Глава IV.

Обязательная часть - cub3D

_________________________________________________________________
|Название программы	|	cub3D				|
|_______________________|_______________________________________|
|Сдать файлы		|	Все ваши файлы			|
|_______________________|_______________________________________|
|Makefile		|	all, clean, fclean, re, bonus	|
|_______________________|_______________________________________|
|Аргументы		|	карта в формате * .cub		|
|_______________________|_______________________________________|
|Внешние функции	| • open, close, read, write, malloc, 	|
|			|	free, perror, strerror, exit,	|
|                       |       printf                  	|
|			| • Все функции математической 		|
|			|	библиотеки (-lm man man 3 math)	|
|			| • Все функции MinilibX		|
|_______________________|_______________________________________|
|Libft разрешено	|	да				|
|_______________________|_______________________________________|
|Описание		|	Вы должны создать «реалистичное»|
|			|	трехмерное графическое 		|
|			|	представление внутренней части 	|
|			|	лабиринта от первого лица. Вы 	|
|			|	должны создать это 		|
|			|	представление, используя 	|
|			|	принципы Ray-Casting, упомянутые|
|			|	ранее.				|
|_______________________|_______________________________________|


Ограничения следующие:
• Вы должны использовать miniLibX. Либо версия, доступная в операционной системе, либо из ее источников. Если вы решите работать с исходными текстами, вам нужно будет применить для вашей библиотеки libft те же правила, что и написанные выше в части «Общие инструкции».

• Управление вашим окном должно оставаться плавным: переход на другое окно, сворачивание и т. д.

• Отображение различных текстур стен (выбор за вами), которые различаются в зависимости от того, с какой стороны стена смотрит (север, юг, восток, запад).

• Ваша программа должна иметь возможность отображать элемент (спрайт) вместо стены.

• Ваша программа должна иметь возможность устанавливать два разных цвета пола и потолка.

• В случае, если Глубокая мысль однажды увидит ваш проект, ваша программа должна сохранить первое визуализированное изображение в формате bmp, когда его вторым аргументом является «–– сохранить».

• Если второй аргумент не указан, программа отображает изображение в окне и соблюдает следующие правила:

	◦ Клавиши со стрелками влево и вправо на клавиатуре должны позволять вам смотреть 		в лабиринт влево и вправо.
	◦ Клавиши W, A, S и D должны позволять перемещать точку обзора через лабиринт.
	◦ Нажатие ESC должно закрыть окно и полностью выйти из программы.
	◦ Щелчок по красному кресту на рамке окна должен закрыть окно и
		выйти из программы чисто.
	◦ Если заявленный размер экрана на карте больше, чем разрешение экрана, размер 			окна будет установлен в зависимости от текущего разрешения экрана.
	◦ Настоятельно рекомендуется использовать изображения minilibX.

• Ваша программа должна принимать в качестве первого аргумента файл описания сцены с расширением .cub расширение.
	◦ Карта должна состоять только из 4 возможных символов: 0 для пустого места, 1 для 		стены, 2 для предмета и N, S, E или W для начальной позиции игрока и 		ориентации появления.
	Это простая действительная карта:

111111
100101102001
1100N1111111

	◦ Карта должна быть закрыта / окружена стенами, в противном случае программа 			должна выдать ошибку.
	◦ За исключением содержимого карты, каждый тип элемента может быть разделен одной 		или несколькими пустыми строками.
	◦ За исключением содержимого карты, которое всегда должно быть последним, каждый 		тип элемента может быть установлен в файле в любом порядке.
	◦ За исключением карты, каждый тип информации из элемента может быть разделен 			одним или несколькими пробелами.
	◦ Карта должна быть проанализирована так, как она выглядит в файле. Пробелы - это 		допустимая часть карты, которую вы решаете. У вас должна быть возможность 		анализировать любую карту, если она соответствует правилам карт.
	◦ Информация о каждом элементе (кроме карты) - это сначала идентификатор типа 			(состоящий из одного или двух символов), за которым следует вся конкретная 		информация для каждого объекта в строгом порядке, например:
∗ Разрешение:
R 1920 1080
· Идентификатор: R 
· размер визуализации x 
· размер визуализации y

∗ Северная текстура:
NO ./path_to_the_north_texture
· Идентификатор: NO
· Путь к северной текстуре

∗ Южная текстура:
SO ./path_to_the_south_texture
· Идентификатор: SO
· Путь к южной текстуре

∗ Западная текстура:
WE ./path_to_the_west_texture
· Идентификатор: WE
· Путь к западной текстуре

∗ Восточная текстура:
EA ./path_to_the_east_texture
· Идентификатор: EA
· Путь к восточной текстуре

* Текстура спрайта:
S ./path_to_the_sprite_texture
· Идентификатор: S
· Путь к текстуре спрайта

* Цвет пола:
F 220,100,0
· Идентификатор F
· Цвета R, G, B в диапазоне [0,255]: 0, 255, 255

∗ Цвет потолка:
С 225,30,0
· Идентификатор: C
· Цвета R, G, B в диапазоне [0,255]: 0, 255, 255
◦ Пример обязательной части с минималистичной сценой .cub:

R 1920 1080
NO ./path_to_the_north_textureSO ./path_to_the_south_texture
WE ./path_to_the_west_textureEA ./path_to_the_east_texture
S ./path_to_the_sprite_texture
F 220,100,0C 225,30,0
	1111111111111111111111111
	1000000000110000000000001	1011000001110000002000001
	1001000000000000000000001111111111011000001110000000000001
10000000001100000111011111111111111110111111111011100000010001
1111011111111101110101001000111000000110101011100000010001
1000200000000000110000001000110000000000000001101010010001
11000001110101011111011110N011111110111 1110101 101111010001 
11111111 1111111 111111111111

Если в файле обнаружена какая-либо неправильная конфигурация, программа должна завершиться должным образом и вернуть «Ошибка \ n» с последующим явным сообщением об ошибке по вашему выбору.





